openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: https://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: https://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://petstore.swagger.io/api
paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPets
      parameters:
        # ?tags[]=dog&tags[]=cat === ?tags[0]=dog&tags[1]=cat
        # schema.type=array, name=tags[], values=[schema.items.type, schema.items.enum]
        # $.tags[string("dog","cat")] -> Parameter("tags", "array", [Value("string", "dog"), Value("string", "cat")])
        - name: tags[]
          in: query
          description: tags to filter by
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - dog
                - cat

        # ?family[0]=cat&family[1]=dog === ?family[]=cat&family[]=dog
        # schema.type=array, name=family, values=[schema.items.type, schema.items.enum]
        # $.family[string("cat","dog")] -> Parameter("family", "array", [Value("string", "cat"), Value("string", "dog")])
        # Property("family", List(
        #   Enum("string", ["cat", "dog"])
        # ))
        - name: family
          in: query
          description: families to filter for
          required: false
          style: deepObject
          schema:
            type: array
            items:
              type: string
              enum:
                - cat
                - dog

        # &criteria[0][field]=name&criteria[0][op][type]=eq&criteria[0][op][negate]=0&criteria[0][value]=something
        # &criteria[1][field]=family&criteria[1][op][type]=like&criteria[1][op][negate]=1&criteria[1][value]=whatever
        # schema.type=array, name=criteria, values=[schema.items.type, object(schema.items.properties)]

        # each property is schema.items.properties of some type.
        # where type can be also an object, and so on - deeply nested.
        # Property("criteria", List(
        #   Object(
        #     Property("field", Enum("string", ["name", "family"])),
        #     Property("op", Object(
        #       Property("type", Enum("string", ["eq", "like"])),
        #       Property("negate", Enum("integer", [0, 1]))
        #     ),
        #     Property("value", "string"),
        #     Property("listPropEnum", List(Enum("string", ["first", "second"])),
        #     Property("listPropNumbers", List("integer"))
        #   )
        # ))
        #
        # Flat list will look like this:
        #
        # $.criteria[].field             = <string>"name"
        # $.criteria[].field             = <string>"family"
        # $.criteria[].op.type           = <string>"eq"
        # $.criteria[].op.type           = <string>"like"
        # $.criteria[].op.negate         = <integer>"0"
        # $.criteria[].op.negate         = <integer>"1"
        # $.criteria[].value             = <string>
        # $.criteria[].listPropEnum[]    = <string>"first"
        # $.criteria[].listPropEnum[]    = <string>"second"
        # $.criteria[].listPropNumbers[] = <integer>
        #
        # Later it will be used to diff against the flattened request/response object (see Util::flatten)
        #

        - name: criteria
          in: query
          description: search criteria
          required: false
          style: deepObject
          explode: true
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    - name
                    - family
                op:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - eq
                        - like
                    negate:
                      type: integer
                      enum:
                        - 0
                        - 1
                value:
                  type: string

                listPropEnum:
                  type: array
                  items:
                    type: string
                    enum:
                      - first
                      - second

                listPropNumbers:
                  type: array
                  items:
                    type: number

        # &object[firstKey]=okay&object[secondKey]=3.14
        # &limit=100
        # $.limit[integer]
        - name: object
          in: query
          description: flat object
          required: false
          style: deepObject
          explode: true
          schema:
            type: object
            properties:
              firstKey:
                type: string
              secondKey:
                type: number

        - name: limit
          in: query
          description: maximum number of results to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        200:
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        404:
          description: pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Pet:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64
        - $ref: '#/components/schemas/NewPet'

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        family:
          type: string
          enum:
            - cat
            - dog
        tag:
          type: array
          items:
            type: string
            enum:
              - funny
              - cat

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
